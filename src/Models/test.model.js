// src/Models/test.model.js

import { DataTypes } from "sequelize";
import { sequelize1 } from "../config/sequelize.js";

/**
 * Test Model
 * Stores all metadata related to a generated test
 */
export const Test = sequelize1.define("Test", {
  test_id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
    allowNull: false,
    comment: "Unique identifier for the test",
  },
  user_id: {
    type: DataTypes.UUID,
    allowNull: false,
    comment: "Reference to the user taking the test",
  },
  topic_uuid: {
    type: DataTypes.UUID,
    allowNull: true,
    comment: "Reference to the topic (CatalogueNode) stored as UUID (not enforced by DB-level FK)",
  },
  topics: {
    type: DataTypes.JSONB,
    allowNull: false,
    comment: "Array of topic objects included in this test",
  },
  questions: {
    type: DataTypes.JSONB,
    allowNull: false,
    comment: "Generated questions with metadata (ID, text, options, answers, etc.)",
  },
  answers: {
    type: DataTypes.JSONB,
    allowNull: true,
    comment: "Correct answers for the test (used for evaluation)",
  },  
  performance_metrics: {
    type: DataTypes.JSONB,
    allowNull: true,
    comment: "Optional performance metrics post evaluation (accuracy, score breakdown, etc.)",
  },
  test_settings: {
    type: DataTypes.JSONB,
    allowNull: false,
    comment: "Settings used for generation (difficulty, retest_wait, fraud_risk_score etc.)",
  },
  status: {
    type: DataTypes.STRING, // Temporarily use STRING instead of ENUM
    defaultValue: "generated",
    allowNull: false,
    comment: "Current state of the test lifecycle",
  },
  eligible_for_bridger: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false,
    comment: "Whether the user is eligible to become a Bridger based on this test",
  },
  result: {
    type: DataTypes.JSONB,
    allowNull: true,
    comment: "Evaluation result (e.g., score, accuracy, time taken, etc.)",
  },

  fraud_flags: {
    type: DataTypes.JSONB,
    allowNull: true,
    comment: "Fraud detection flags (suspicious patterns, duplicate attempts, etc.)",
  },
}, {
  tableName: "tests",
  schema: "user",
  timestamps: true,
  underscored: true,
  comment: "Stores all tests generated by AI engine with metadata, fraud signals, results, and flags"
});
